{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* Projects */
    // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
    "composite": true /* Enable constraints that allow a TypeScript project to be used with project references. */,
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    "target": "es5" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
     "lib": [
       "dom", // tsconfig의 lib옵션을 주석처리하기 전에는 , 기본적으로 brower의 dom이 인식되지만, lib옵션을 활성화했다면 browser와 관계없이 node code로 작성할 수 있게 되므로, dom옵션을 넣어줘야한다.
       "es6", // lib을 활성화했다면, ,global(자바스크립트 전역)에서 es6 옵션을 사용기위해 추가해줘야함.
       "dom.iterable", // lib을 활성화했고, browser를 이용한다면, 필요할거다.
       "ScriptHost", // lib을 활성화했고, browser를 이용한다면, 필요할거다.
     ],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    // "jsx": "preserve",                                /* Specify what JSX code is generated. */
     "experimentalDecorators": true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */

    /* Modules */
    "module": "amd"                                 /* Specify what module code is generated. */,
     "rootDir": "./src",                                  /* Specify the root folder within your source files. */
    // "moduleResolution": "node",                       /* Specify how TypeScript looks up a file from a given module specifier. */
    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
    // "resolveJsonModule": true,                        /* Enable importing .json files. */
    // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
    "allowJs": true                                       /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files.  타입스크립트가 .js파일을 compile할수있도록 허용함. (원래는 ts파일만 컴파일함) */,
    // "checkJs": true,                                   /*  error reporting in type-checked JavaScript files. Typescipt가 컴파일을 수행하지 않더라도, 구문을 검사하고 잠재적 에러를 보고하게 함. => 용도 : 타입스크립을 사용하지않고, (vanila)자바스크립트에서 타입스크립트의 장점을 취하고자할 때 /  */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

    /* Emit */
    // "declaration": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
     "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
    /* - map파일이 생성되게한다 / 맵파일은 JS와 TS파일 사이의 debugger를 이어주는 역할*/
     "outFile": "./dist/bundle.js",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
    /* - outFile은 Typescript가 namespace와 연결되도록한다.
        여러 개의 JS파일을 컴파일하신 대신에, compile중 연결되는 reference들을 하나의 JS파일로 연결한다.
        ! outFile을 활성화할 경우, "module"은 commonJs를 사용할 수 없고, "amd"를 사용해야한다.

    */
    "outDir": "dist/src"                                     /* Specify an output folder for all emitted files. */,
     "removeComments": true,                           /* Disable emitting comments. 타입스크립트, 자바스크립트 파일으=  */
    // "noEmit": true,                                   /* Disable emitting files from a compilation. */
    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "importsNotUsedAsValues": "remove",               /* Specify emit/checking behavior for imports that are only used for types. */
    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
     "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. 에러가 존재할 경우, 타입스크립트를 사용하여 컴파일 할 수 없게 함 / 기본값:false */
    /* => 용도: 일반적으로 타입스크립트 파일에 에러가 있는 경우, 자바스크립트 파일을 가져오고 싶지 않은 경우에 설정*/
    // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
    //     "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */
    // "preserveValueImports": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */

    /* Interop Constraints */
    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
    // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,

    /* Type Checking */
    "strict": true /* Enable all strict type-checking options.*/,
    /* - => 해당 옵션은, 아래의 모든 strict옵션을 활성화한것도 동일하다. */
     "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    /* - => any TYPE을 허용하지 않을 것인가의 여부 //  *** strict가 true이고, noImplicitAny가 false면, any타입에 대해서는 IDE 및 컴파일 에러를 발생시키지 않는다*/
     "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
     "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
    // "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */
    // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
//     "noUnusedLocals": true,                           /* Enable error reporting when local variables aren't read. */
    /* - => 지역변수가 사용되지 않을 경우 에러표기*/
    // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read. */
    /* - => 사용되지 않는 매개변수가 존재할 경우 경우 에러표기*/
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true /* Skip type checking all .d.ts files. */
  },
  "include": [ // - build에 포함시킬 파일
    "./src/**/*",
    // => 가운데 ** 별표가 2개인 경우, "해당 경로에 존재하는 폴더 및 파일 모두 컴파일 대상이 된다.
    // => 가운데 * 별표가 1개인 경우(./src/*/*), 가운데 경로에 해당하는 폴더 및 파일이 컴파일 되지 않고,  마지막 경로에 존재하는 파일만 컴파일된다.
  ],
  "exclude": [
    "node_modules", // would be theh default 기본으로 제외돼어있을 것이.
    "**/*.dev.ts"
  ] /* - 'build'에서 제외시킬 파일*/
}
